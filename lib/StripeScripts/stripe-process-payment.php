<?php 
function pippin_stripe_process_payment() {
	if(isset($_POST['action']) && $_POST['action'] == 'stripe' && wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce')) {
 		
 		/**
		 * "Stripe" Data Setup
		 */
		global $stripe_options;
		require_once(get_stylesheet_directory() . '/lib/Stripe.php'); // load the stripe libraries
		$token = $_POST['stripeToken']; // retrieve the token generated by stripe.js
		$desc = $_POST['description']; // retrieve product description

		/**
	 	 * Calculate total amount server side (based on description format)
	   */
		$subtotal = 0;
		$quantity = 0;
		$desiredProducts = explode('|', $desc);
		foreach ($desiredProducts as $desiredProduct) {
			$desiredProductValues = explode(',',$desiredProduct);
			foreach ($desiredProductValues as $key => $value) {
				// Returns PostID
				if ( $key == 0 ) {
					//$productPrice = get_field('product_price', $value); // Individual product price
					$productPrice = get_post_meta( $value, 'product_price', true );
				}
				// Returns Quantity
				if($key == 3) {
				$quantity = $value;
				}
				$temp = $productPrice * $quantity; // For each product, calculate total cost before tax
			}
			$subtotal += $temp; // Add each product total to the subtotal

		}
		$currenttaxrate = $stripe_options['tax_rate'];
		$tax = round($subtotal * $currenttaxrate); // Round tax to an integer (rounds up after .5)
		$grandtotal = $subtotal + $tax;

		// set the total amount in cents
		$amount = $grandtotal;
 
		// check if we are using test mode
		if(isset($stripe_options['test_mode']) && $stripe_options['test_mode']) {
			$secret_key = $stripe_options['test_secret_key'];
		} else {
			$secret_key = $stripe_options['live_secret_key'];
		}
 		
 		/*
 		 * Set Stripe API Key
 		 */
 		Stripe::setApiKey($secret_key);

		/**
		 * "Charging the Card via the User"
		 */
		try {

			// STEP ONE: Check if user has an existing account.
			// Grab user's customer ID...
			if ( is_user_logged_in() ):
				global $current_user;
				get_currentuserinfo();
				$customer_id = get_user_meta( get_current_user_id(), '_stripe_customer_id', true );
				$customer_email = $current_user->user_email;
			else:
				$customer_id = false;
				$customer_email = $_POST['email']; // Are we doing this correctly?!
			endif;

			// STEP TWO: Create a new customer if our current user doesn't have one...
			if( !$customer_id ) {
				$customer = Stripe_Customer::create(array(
					'card' => $token,
					'email' => $customer_email,
				));
				$customer_id = $customer->id;
				// Enable the next three lines when we want to start storing stripe customer IDs
				//if( is_user_logged_in () ) {
				//	update_user_meta( get_current_user_id(), '_stripe_customer_id', $customer_id );
				//}
			}
			
			// STEP THREE: Charge customer once an customer id is found or created
			if( $customer_id ) {
				$charge = Stripe_Charge::create(array(
					'amount' => $amount, // amount in cents
					'currency' => 'usd',
					'customer' => $customer_id,
					'description' => $desc
				));
			} else {
				// the customer wasn't found or created, throw an error
				throw new Exception( __( 'A customer could not be created, or no customer was found.', 'litton_bags' ) );
			}

			// redirect on successful payment
			$redirect = add_query_arg('payment', 'paid', $_POST['redirect']);
 		
 		/*
 		 * Handle Card Errors
 		 * NOTE: Addresses seeme to get cashed even on failure :: https://support.stripe.com/questions/cvc-or-avs-failed-but-payment-succeeded
 		 * Important: https://support.stripe.com/questions/what-are-street-and-zip-checks-address-verification-or-avs-and-how-should-i-use-them
 		 */
		} catch(Stripe_CardError $e) {
			// redirect on failed payment
			$redirect = add_query_arg('payment', 'cardError', $_POST['redirect']);
			// Since it's a decline, Stripe_CardError will be caught
  		$body = $e->getJsonBody();
  		$err  = $body['error'];

		  print('Status is:' . $e->getHttpStatus() . "\n");
		  print('Type is:' . $err['type'] . "\n");
		  print('Code is:' . $err['code'] . "\n");
		  // param is '' in this case
		  print('Param is:' . $err['param'] . "\n");
		  print('Message is:' . $err['message'] . "\n");
		} catch (Stripe_InvalidRequestError $e) {
		  // Invalid parameters were supplied to Stripe's API
		} catch (Stripe_AuthenticationError $e) {
		  // Authentication with Stripe's API failed
		  // (maybe you changed API keys recently)
		} catch (Stripe_ApiConnectionError $e) {
			// "Cannot validate payment data with Stripe. Are you still connected to the internet."
		  // Network communication with Stripe failed
		} catch (Stripe_Error $e) {
		  // Display a very generic error to the user, and maybe send
		  // yourself an email
		} catch (Exception $e) {
			// redirect on failed payment
			$redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
		}
 
		// redirect back to our previous page with the added query variable
		wp_redirect($redirect); exit;

	} // Nonce check
} // end function
add_action('init', 'pippin_stripe_process_payment');
?>